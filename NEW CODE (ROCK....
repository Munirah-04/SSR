import cv2
import mediapipe
import time


def determine_winner(move1, move2):
    if move1 == move2:
        return 0  
    rules = {"Rock": "Scissors", "Paper": "Rock", "Scissors": "Paper"}
    if rules[move1] == move2:
        return 1  
    return 2  



def get_finger_status(hand_landmarks, finger_name):
    finger_id_map = {'INDEX': 8, 'MIDDLE': 12, 'RING': 16, 'PINKY': 20}
    tip_y = hand_landmarks.landmark[finger_id_map[finger_name]].y
    mcp_y = hand_landmarks.landmark[finger_id_map[finger_name] - 2].y
    return tip_y < mcp_y


def get_thumb_status(hand_landmarks):
    thumb_tip_x = hand_landmarks.landmark[4].x
    thumb_ip_x = hand_landmarks.landmark[3].x
    thumb_mcp_x = hand_landmarks.landmark[2].x
    return thumb_tip_x > thumb_ip_x > thumb_mcp_x


def get_hand_move(hand_landmarks):
    state = ""
    state += "1" if get_thumb_status(hand_landmarks) else "0"
    state += "1" if get_finger_status(hand_landmarks, 'INDEX') else "0"
    state += "1" if get_finger_status(hand_landmarks, 'MIDDLE') else "0"
    state += "1" if get_finger_status(hand_landmarks, 'RING') else "0"
    state += "1" if get_finger_status(hand_landmarks, 'PINKY') else "0"

    if state == "00000":
        return "Rock"
    elif state == "11111":
        return "Paper"
    elif state == "01100":
        return "Scissors"
    return "UNKNOWN"


def start_video():
    mp_drawing = mediapipe.solutions.drawing_utils
    mp_hands = mediapipe.solutions.hands
    cap = cv2.VideoCapture(0)

    timer_started = False
    hold_for_play = False
    time_left_now = 3
    start_time = 0
    game_result = ""

    with mp_hands.Hands(
        max_num_hands=2,
        min_detection_confidence=0.7,
        min_tracking_confidence=0.5
    ) as hands:
        while True:
            ret, frame = cap.read()
            if not ret:
                break

            frame = cv2.flip(frame, 1)
            rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            results = hands.process(rgb)

            player_moves = []

            if results.multi_hand_landmarks:
                for hand_landmarks in results.multi_hand_landmarks:
                    mp_drawing.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)
                    move = get_hand_move(hand_landmarks)
                    player_moves.append(move)

            if timer_started:
                now = time.time()
                if now - start_time >= 1:
                    time_left_now -= 1
                    start_time = now
                    if time_left_now <= 0:
                        timer_started = False
                        hold_for_play = True

            if hold_for_play:
                if len(player_moves) == 2 and "UNKNOWN" not in player_moves:
                    p1_move, p2_move = player_moves
                    result = determine_winner(p1_move, p2_move)
                    if result == 0:
                        game_result = f"Draw! Both played {p1_move}"
                    elif result == 1:
                        game_result = f"Player 1 wins! {p1_move} beats {p2_move}"
                    else:
                        game_result = f"Player 2 wins! {p2_move} beats {p1_move}"
                    hold_for_play = False

            font = cv2.FONT_HERSHEY_SIMPLEX

            if not timer_started and not hold_for_play:
                cv2.putText(frame, game_result, (10, 450), font, 0.8, (255, 255, 255), 2)

            if hold_for_play:
                label = "PLAY NOW!"
            elif timer_started:
                label = f"STARTS IN {time_left_now}"
            else:
                label = "PRESS SPACE TO START!"

            cv2.putText(frame, label, (150, 50), font, 1, (0, 255, 255), 2)
            cv2.imshow("Rock Paper Scissors - 2 Players", frame)

            key = cv2.waitKey(1)
            if key == 32:  # Space
                time_left_now = 3
                start_time = time.time()
                timer_started = True
                game_result = ""
            elif key == 27:  # ESC
                break

    cap.release()
    cv2.destroyAllWindows()


if __name__ == "__main__":
    start_video()
